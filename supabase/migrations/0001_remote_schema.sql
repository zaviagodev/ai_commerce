\n\nSET statement_timeout = 0;
\nSET lock_timeout = 0;
\nSET idle_in_transaction_session_timeout = 0;
\nSET client_encoding = 'UTF8';
\nSET standard_conforming_strings = on;
\nSELECT pg_catalog.set_config('search_path', '', false);
\nSET check_function_bodies = false;
\nSET xmloption = content;
\nSET client_min_messages = warning;
\nSET row_security = off;
\n\n\nCREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";
\n\n\n\n\n\n\nCOMMENT ON SCHEMA "public" IS 'standard public schema';
\n\n\n\nCREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";
\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";
\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";
\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";
\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";
\n\n\n\n\n\n\nCREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";
\n\n\n\n\n\n\nCREATE OR REPLACE FUNCTION "public"."create_order"("p_store_name" "text", "p_customer_id" "uuid", "p_status" "text", "p_subtotal" numeric, "p_discount" numeric, "p_shipping" numeric, "p_tax" numeric, "p_total" numeric, "p_notes" "text", "p_tags" "text"[], "p_items" "jsonb") RETURNS TABLE("id" "uuid", "created_at" timestamp with time zone, "updated_at" timestamp with time zone)\n    LANGUAGE "plpgsql" SECURITY DEFINER\n    AS $$\ndeclare\n  v_order_id uuid;
\n  v_item jsonb;
\n  v_product_quantity integer;
\nbegin\n  -- Create the order\n  insert into orders (\n    store_name,\n    customer_id,\n    status,\n    subtotal,\n    discount,\n    shipping,\n    tax,\n    total,\n    notes,\n    tags\n  ) values (\n    p_store_name,\n    p_customer_id,\n    p_status,\n    p_subtotal,\n    p_discount,\n    p_shipping,\n    p_tax,\n    p_total,\n    p_notes,\n    p_tags\n  ) returning orders.id into v_order_id;
\n\n  -- Process each order item\n  for v_item in select * from jsonb_array_elements(p_items)\n  loop\n    -- Check product quantity\n    select products.quantity into v_product_quantity\n    from products\n    where products.id = (v_item->>'product_id')::uuid\n    and products.store_name = p_store_name\n    and products.track_quantity = true\n    for update;
\n\n    if v_product_quantity is not null then\n      if v_product_quantity < (v_item->>'quantity')::integer then\n        raise exception 'Insufficient stock for product %', (v_item->>'product_id')::uuid;
\n      end if;
\n\n      -- Update product quantity\n      update products\n      set \n        quantity = quantity - (v_item->>'quantity')::integer,\n        updated_at = now()\n      where products.id = (v_item->>'product_id')::uuid\n      and products.store_name = p_store_name;
\n    end if;
\n\n    -- Create order item\n    insert into order_items (\n      order_id,\n      product_id,\n      quantity,\n      price,\n      total\n    ) values (\n      v_order_id,\n      (v_item->>'product_id')::uuid,\n      (v_item->>'quantity')::integer,\n      (v_item->>'price')::decimal,\n      (v_item->>'total')::decimal\n    );
\n  end loop;
\n\n  -- Return the created order details\n  return query\n  select \n    orders.id,\n    orders.created_at,\n    orders.updated_at\n  from orders\n  where orders.id = v_order_id;
\nend;
\n$$;
\n\n\nALTER FUNCTION "public"."create_order"("p_store_name" "text", "p_customer_id" "uuid", "p_status" "text", "p_subtotal" numeric, "p_discount" numeric, "p_shipping" numeric, "p_tax" numeric, "p_total" numeric, "p_notes" "text", "p_tags" "text"[], "p_items" "jsonb") OWNER TO "postgres";
\n\n\nCREATE OR REPLACE FUNCTION "public"."place_order"("p_store_name" "text", "p_customer_id" "uuid", "p_status" "text", "p_subtotal" numeric, "p_discount" numeric, "p_shipping" numeric, "p_tax" numeric, "p_total" numeric, "p_notes" "text", "p_tags" "text"[], "p_items" "jsonb") RETURNS TABLE("id" "uuid", "created_at" timestamp with time zone, "updated_at" timestamp with time zone)\n    LANGUAGE "plpgsql" SECURITY DEFINER\n    AS $$\ndeclare\n  v_order_id uuid;
\n  v_item jsonb;
\n  v_product record;
\nbegin\n  -- Start transaction\n  begin\n    -- Create the order\n    insert into orders (\n      store_name,\n      customer_id,\n      status,\n      subtotal,\n      discount,\n      shipping,\n      tax,\n      total,\n      notes,\n      tags\n    ) values (\n      p_store_name,\n      p_customer_id,\n      p_status,\n      p_subtotal,\n      p_discount,\n      p_shipping,\n      p_tax,\n      p_total,\n      p_notes,\n      p_tags\n    ) returning id into v_order_id;
\n\n    -- Process each order item\n    for v_item in select * from jsonb_array_elements(p_items)\n    loop\n      -- Lock and validate product\n      select *\n      into v_product\n      from products\n      where id = (v_item->>'product_id')::uuid\n        and store_name = p_store_name\n        and status = 'active'\n      for update;
\n\n      if v_product is null then\n        raise exception 'Product % not found or is not active', (v_item->>'product_id')::uuid;
\n      end if;
\n\n      -- Check stock if tracking is enabled\n      if v_product.track_quantity then\n        if v_product.quantity < (v_item->>'quantity')::integer then\n          raise exception 'Insufficient stock for product %: % available, % requested',\n            v_product.name, v_product.quantity, (v_item->>'quantity')::integer;
\n        end if;
\n\n        -- Update product stock\n        update products\n        set \n          quantity = quantity - (v_item->>'quantity')::integer,\n          updated_at = now()\n        where id = v_product.id;
\n      end if;
\n\n      -- Create order item\n      insert into order_items (\n        order_id,\n        product_id,\n        quantity,\n        price,\n        total\n      ) values (\n        v_order_id,\n        v_product.id,\n        (v_item->>'quantity')::integer,\n        (v_item->>'price')::decimal,\n        (v_item->>'total')::decimal\n      );
\n    end loop;
\n\n    -- Return the created order details\n    return query\n    select orders.id, orders.created_at, orders.updated_at\n    from orders\n    where orders.id = v_order_id;
\n\n    -- Commit transaction\n    commit;
\n  exception\n    when others then\n      -- Rollback transaction on any error\n      rollback;
\n      raise;
\n  end;
\nend;
\n$$;
\n\n\nALTER FUNCTION "public"."place_order"("p_store_name" "text", "p_customer_id" "uuid", "p_status" "text", "p_subtotal" numeric, "p_discount" numeric, "p_shipping" numeric, "p_tax" numeric, "p_total" numeric, "p_notes" "text", "p_tags" "text"[], "p_items" "jsonb") OWNER TO "postgres";
\n\n\nCREATE OR REPLACE FUNCTION "public"."update_product_stock"("p_product_id" "uuid", "p_quantity" integer) RETURNS "void"\n    LANGUAGE "plpgsql" SECURITY DEFINER\n    AS $$\nbegin\n  update products\n  set \n    quantity = quantity - p_quantity,\n    updated_at = now()\n  where \n    id = p_product_id\n    and track_quantity = true\n    and quantity >= p_quantity;
\n    \n  if not found then\n    raise exception 'Failed to update product stock';
\n  end if;
\nend;
\n$$;
\n\n\nALTER FUNCTION "public"."update_product_stock"("p_product_id" "uuid", "p_quantity" integer) OWNER TO "postgres";
\n\nSET default_tablespace = '';
\n\nSET default_table_access_method = "heap";
\n\n\nCREATE TABLE IF NOT EXISTS "public"."customer_addresses" (\n    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,\n    "customer_id" "uuid",\n    "store_name" "text",\n    "type" "text" NOT NULL,\n    "first_name" "text" NOT NULL,\n    "last_name" "text" NOT NULL,\n    "company" "text",\n    "address1" "text" NOT NULL,\n    "address2" "text",\n    "city" "text" NOT NULL,\n    "state" "text" NOT NULL,\n    "postal_code" "text" NOT NULL,\n    "country" "text" NOT NULL,\n    "phone" "text",\n    "is_default" boolean DEFAULT false,\n    "created_at" timestamp with time zone DEFAULT "now"(),\n    "updated_at" timestamp with time zone DEFAULT "now"(),\n    CONSTRAINT "customer_addresses_type_check" CHECK (("type" = ANY (ARRAY['billing'::"text", 'shipping'::"text"])))\n);
\n\n\nALTER TABLE "public"."customer_addresses" OWNER TO "postgres";
\n\n\nCREATE TABLE IF NOT EXISTS "public"."customers" (\n    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,\n    "store_name" "text",\n    "first_name" "text" NOT NULL,\n    "last_name" "text" NOT NULL,\n    "email" "text" NOT NULL,\n    "phone" "text",\n    "accepts_marketing" boolean DEFAULT false,\n    "tags" "text"[],\n    "created_at" timestamp with time zone DEFAULT "now"(),\n    "updated_at" timestamp with time zone DEFAULT "now"()\n);
\n\n\nALTER TABLE "public"."customers" OWNER TO "postgres";
\n\n\nCREATE TABLE IF NOT EXISTS "public"."order_items" (\n    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,\n    "order_id" "uuid",\n    "product_id" "uuid",\n    "quantity" integer NOT NULL,\n    "price" numeric(10,2) NOT NULL,\n    "total" numeric(10,2) NOT NULL,\n    "created_at" timestamp with time zone DEFAULT "now"(),\n    "updated_at" timestamp with time zone DEFAULT "now"()\n);
\n\n\nALTER TABLE "public"."order_items" OWNER TO "postgres";
\n\n\nCREATE TABLE IF NOT EXISTS "public"."orders" (\n    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,\n    "store_name" "text",\n    "customer_id" "uuid",\n    "status" "text" NOT NULL,\n    "subtotal" numeric(10,2) NOT NULL,\n    "discount" numeric(10,2) DEFAULT 0,\n    "shipping" numeric(10,2) DEFAULT 0,\n    "tax" numeric(10,2) DEFAULT 0,\n    "total" numeric(10,2) NOT NULL,\n    "notes" "text",\n    "tags" "text"[],\n    "created_at" timestamp with time zone DEFAULT "now"(),\n    "updated_at" timestamp with time zone DEFAULT "now"(),\n    CONSTRAINT "orders_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'processing'::"text", 'shipped'::"text", 'delivered'::"text", 'cancelled'::"text"])))\n);
\n\n\nALTER TABLE "public"."orders" OWNER TO "postgres";
\n\n\nCREATE TABLE IF NOT EXISTS "public"."product_images" (\n    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,\n    "product_id" "uuid",\n    "url" "text" NOT NULL,\n    "alt" "text",\n    "position" integer DEFAULT 0 NOT NULL,\n    "created_at" timestamp with time zone DEFAULT "now"(),\n    "updated_at" timestamp with time zone DEFAULT "now"()\n);
\n\n\nALTER TABLE "public"."product_images" OWNER TO "postgres";
\n\n\nCREATE TABLE IF NOT EXISTS "public"."product_tags" (\n    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,\n    "product_id" "uuid",\n    "name" "text" NOT NULL,\n    "created_at" timestamp with time zone DEFAULT "now"(),\n    "updated_at" timestamp with time zone DEFAULT "now"()\n);
\n\n\nALTER TABLE "public"."product_tags" OWNER TO "postgres";
\n\n\nCREATE TABLE IF NOT EXISTS "public"."products" (\n    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,\n    "store_name" "text",\n    "name" "text" NOT NULL,\n    "description" "text",\n    "category_id" "text",\n    "category_name" "text",\n    "price" numeric(10,2) NOT NULL,\n    "compare_at_price" numeric(10,2),\n    "cost" numeric(10,2),\n    "sku" "text",\n    "barcode" "text",\n    "track_quantity" boolean DEFAULT false,\n    "quantity" integer,\n    "weight" numeric(10,2) NOT NULL,\n    "weight_unit" "text" NOT NULL,\n    "status" "text" NOT NULL,\n    "created_at" timestamp with time zone DEFAULT "now"(),\n    "updated_at" timestamp with time zone DEFAULT "now"(),\n    CONSTRAINT "products_status_check" CHECK (("status" = ANY (ARRAY['draft'::"text", 'active'::"text", 'archived'::"text"]))),\n    CONSTRAINT "products_weight_unit_check" CHECK (("weight_unit" = ANY (ARRAY['kg'::"text", 'lb'::"text"])))\n);
\n\n\nALTER TABLE "public"."products" OWNER TO "postgres";
\n\n\nCREATE TABLE IF NOT EXISTS "public"."profiles" (\n    "id" "uuid" NOT NULL,\n    "email" "text" NOT NULL,\n    "full_name" "text" NOT NULL,\n    "store_name" "text" NOT NULL,\n    "avatar_url" "text",\n    "updated_at" timestamp with time zone DEFAULT "now"(),\n    "created_at" timestamp with time zone DEFAULT "now"()\n);
\n\n\nALTER TABLE "public"."profiles" OWNER TO "postgres";
\n\n\nALTER TABLE ONLY "public"."customer_addresses"\n    ADD CONSTRAINT "customer_addresses_pkey" PRIMARY KEY ("id");
\n\n\n\nALTER TABLE ONLY "public"."customers"\n    ADD CONSTRAINT "customers_pkey" PRIMARY KEY ("id");
\n\n\n\nALTER TABLE ONLY "public"."customers"\n    ADD CONSTRAINT "customers_store_name_email_key" UNIQUE ("store_name", "email");
\n\n\n\nALTER TABLE ONLY "public"."order_items"\n    ADD CONSTRAINT "order_items_pkey" PRIMARY KEY ("id");
\n\n\n\nALTER TABLE ONLY "public"."orders"\n    ADD CONSTRAINT "orders_pkey" PRIMARY KEY ("id");
\n\n\n\nALTER TABLE ONLY "public"."product_images"\n    ADD CONSTRAINT "product_images_pkey" PRIMARY KEY ("id");
\n\n\n\nALTER TABLE ONLY "public"."product_tags"\n    ADD CONSTRAINT "product_tags_pkey" PRIMARY KEY ("id");
\n\n\n\nALTER TABLE ONLY "public"."products"\n    ADD CONSTRAINT "products_pkey" PRIMARY KEY ("id");
\n\n\n\nALTER TABLE ONLY "public"."profiles"\n    ADD CONSTRAINT "profiles_email_key" UNIQUE ("email");
\n\n\n\nALTER TABLE ONLY "public"."profiles"\n    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");
\n\n\n\nALTER TABLE ONLY "public"."profiles"\n    ADD CONSTRAINT "profiles_store_name_key" UNIQUE ("store_name");
\n\n\n\nCREATE INDEX "customer_addresses_customer_id_idx" ON "public"."customer_addresses" USING "btree" ("customer_id");
\n\n\n\nCREATE INDEX "customers_email_idx" ON "public"."customers" USING "btree" ("email");
\n\n\n\nCREATE INDEX "customers_store_name_idx" ON "public"."customers" USING "btree" ("store_name");
\n\n\n\nCREATE INDEX "order_items_order_id_idx" ON "public"."order_items" USING "btree" ("order_id");
\n\n\n\nCREATE INDEX "order_items_product_id_idx" ON "public"."order_items" USING "btree" ("product_id");
\n\n\n\nCREATE INDEX "orders_customer_id_idx" ON "public"."orders" USING "btree" ("customer_id");
\n\n\n\nCREATE INDEX "orders_status_idx" ON "public"."orders" USING "btree" ("status");
\n\n\n\nCREATE INDEX "orders_store_name_idx" ON "public"."orders" USING "btree" ("store_name");
\n\n\n\nCREATE INDEX "product_images_product_id_idx" ON "public"."product_images" USING "btree" ("product_id");
\n\n\n\nCREATE INDEX "product_tags_product_id_idx" ON "public"."product_tags" USING "btree" ("product_id");
\n\n\n\nCREATE INDEX "products_status_idx" ON "public"."products" USING "btree" ("status");
\n\n\n\nCREATE INDEX "products_store_name_idx" ON "public"."products" USING "btree" ("store_name");
\n\n\n\nCREATE INDEX "profiles_email_idx" ON "public"."profiles" USING "btree" ("email");
\n\n\n\nCREATE INDEX "profiles_store_name_idx" ON "public"."profiles" USING "btree" ("store_name");
\n\n\n\nALTER TABLE ONLY "public"."customer_addresses"\n    ADD CONSTRAINT "customer_addresses_customer_id_fkey" FOREIGN KEY ("customer_id") REFERENCES "public"."customers"("id") ON DELETE CASCADE;
\n\n\n\nALTER TABLE ONLY "public"."customer_addresses"\n    ADD CONSTRAINT "customer_addresses_store_name_fkey" FOREIGN KEY ("store_name") REFERENCES "public"."profiles"("store_name") ON DELETE CASCADE;
\n\n\n\nALTER TABLE ONLY "public"."customers"\n    ADD CONSTRAINT "customers_store_name_fkey" FOREIGN KEY ("store_name") REFERENCES "public"."profiles"("store_name") ON DELETE CASCADE;
\n\n\n\nALTER TABLE ONLY "public"."order_items"\n    ADD CONSTRAINT "order_items_order_id_fkey" FOREIGN KEY ("order_id") REFERENCES "public"."orders"("id") ON DELETE CASCADE;
\n\n\n\nALTER TABLE ONLY "public"."order_items"\n    ADD CONSTRAINT "order_items_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE SET NULL;
\n\n\n\nALTER TABLE ONLY "public"."orders"\n    ADD CONSTRAINT "orders_customer_id_fkey" FOREIGN KEY ("customer_id") REFERENCES "public"."customers"("id") ON DELETE SET NULL;
\n\n\n\nALTER TABLE ONLY "public"."orders"\n    ADD CONSTRAINT "orders_store_name_fkey" FOREIGN KEY ("store_name") REFERENCES "public"."profiles"("store_name") ON DELETE CASCADE;
\n\n\n\nALTER TABLE ONLY "public"."product_images"\n    ADD CONSTRAINT "product_images_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE CASCADE;
\n\n\n\nALTER TABLE ONLY "public"."product_tags"\n    ADD CONSTRAINT "product_tags_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products"("id") ON DELETE CASCADE;
\n\n\n\nALTER TABLE ONLY "public"."products"\n    ADD CONSTRAINT "products_store_name_fkey" FOREIGN KEY ("store_name") REFERENCES "public"."profiles"("store_name") ON DELETE CASCADE;
\n\n\n\nALTER TABLE ONLY "public"."profiles"\n    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;
\n\n\n\nCREATE POLICY "Enable insert for authenticated users only" ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));
\n\n\n\nCREATE POLICY "Enable read access for all users" ON "public"."profiles" FOR SELECT USING (true);
\n\n\n\nCREATE POLICY "Enable update for users based on id" ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));
\n\n\n\nCREATE POLICY "Public users can create customer addresses" ON "public"."customer_addresses" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1\n   FROM "public"."customers"\n  WHERE (("customers"."id" = "customer_addresses"."customer_id") AND ("customers"."store_name" = "customer_addresses"."store_name")))));
\n\n\n\nCREATE POLICY "Public users can create customers" ON "public"."customers" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE ("profiles"."store_name" = "customers"."store_name"))));
\n\n\n\nCREATE POLICY "Public users can create order items" ON "public"."order_items" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1\n   FROM "public"."orders"\n  WHERE ("orders"."id" = "order_items"."order_id"))));
\n\n\n\nCREATE POLICY "Public users can create orders" ON "public"."orders" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE ("profiles"."store_name" = "orders"."store_name"))));
\n\n\n\nCREATE POLICY "Public users can view active products" ON "public"."products" FOR SELECT USING ((("status" = 'active'::"text") AND (EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE ("profiles"."store_name" = "products"."store_name")))));
\n\n\n\nCREATE POLICY "Public users can view product images" ON "public"."product_images" FOR SELECT USING ((EXISTS ( SELECT 1\n   FROM "public"."products"\n  WHERE (("products"."id" = "product_images"."product_id") AND ("products"."status" = 'active'::"text")))));
\n\n\n\nCREATE POLICY "Public users can view product tags" ON "public"."product_tags" FOR SELECT USING ((EXISTS ( SELECT 1\n   FROM "public"."products"\n  WHERE (("products"."id" = "product_tags"."product_id") AND ("products"."status" = 'active'::"text")))));
\n\n\n\nCREATE POLICY "Users can delete their store's customer addresses" ON "public"."customer_addresses" FOR DELETE USING ((EXISTS ( SELECT 1\n   FROM "public"."customers"\n  WHERE (("customers"."id" = "customer_addresses"."customer_id") AND ("customers"."store_name" = "customer_addresses"."store_name") AND (EXISTS ( SELECT 1\n           FROM "public"."profiles"\n          WHERE (("profiles"."store_name" = "customers"."store_name") AND ("profiles"."id" = "auth"."uid"()))))))));
\n\n\n\nCREATE POLICY "Users can delete their store's customers" ON "public"."customers" FOR DELETE USING ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "customers"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can delete their store's orders" ON "public"."orders" FOR DELETE USING ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "orders"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can delete their store's products" ON "public"."products" FOR DELETE USING ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "products"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can insert addresses to their store's customers" ON "public"."customer_addresses" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1\n   FROM "public"."customers"\n  WHERE (("customers"."id" = "customer_addresses"."customer_id") AND ("customers"."store_name" = "customer_addresses"."store_name") AND (EXISTS ( SELECT 1\n           FROM "public"."profiles"\n          WHERE (("profiles"."store_name" = "customers"."store_name") AND ("profiles"."id" = "auth"."uid"()))))))));
\n\n\n\nCREATE POLICY "Users can insert customers to their store" ON "public"."customers" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "customers"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can insert orders to their store" ON "public"."orders" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "orders"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can insert products to their store" ON "public"."products" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "products"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can manage their store's order items" ON "public"."order_items" USING ((EXISTS ( SELECT 1\n   FROM "public"."orders"\n  WHERE (("orders"."id" = "order_items"."order_id") AND (EXISTS ( SELECT 1\n           FROM "public"."profiles"\n          WHERE (("profiles"."store_name" = "orders"."store_name") AND ("profiles"."id" = "auth"."uid"()))))))));
\n\n\n\nCREATE POLICY "Users can manage their store's product images" ON "public"."product_images" USING ((EXISTS ( SELECT 1\n   FROM "public"."products"\n  WHERE (("products"."id" = "product_images"."product_id") AND (EXISTS ( SELECT 1\n           FROM "public"."profiles"\n          WHERE (("profiles"."store_name" = "products"."store_name") AND ("profiles"."id" = "auth"."uid"()))))))));
\n\n\n\nCREATE POLICY "Users can manage their store's product tags" ON "public"."product_tags" USING ((EXISTS ( SELECT 1\n   FROM "public"."products"\n  WHERE (("products"."id" = "product_tags"."product_id") AND (EXISTS ( SELECT 1\n           FROM "public"."profiles"\n          WHERE (("profiles"."store_name" = "products"."store_name") AND ("profiles"."id" = "auth"."uid"()))))))));
\n\n\n\nCREATE POLICY "Users can update their store's customer addresses" ON "public"."customer_addresses" FOR UPDATE USING ((EXISTS ( SELECT 1\n   FROM "public"."customers"\n  WHERE (("customers"."id" = "customer_addresses"."customer_id") AND ("customers"."store_name" = "customer_addresses"."store_name") AND (EXISTS ( SELECT 1\n           FROM "public"."profiles"\n          WHERE (("profiles"."store_name" = "customers"."store_name") AND ("profiles"."id" = "auth"."uid"()))))))));
\n\n\n\nCREATE POLICY "Users can update their store's customers" ON "public"."customers" FOR UPDATE USING ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "customers"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can update their store's orders" ON "public"."orders" FOR UPDATE USING ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "orders"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can update their store's products" ON "public"."products" FOR UPDATE USING ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "products"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can view their store's customer addresses" ON "public"."customer_addresses" FOR SELECT USING ((EXISTS ( SELECT 1\n   FROM "public"."customers"\n  WHERE (("customers"."id" = "customer_addresses"."customer_id") AND ("customers"."store_name" = "customer_addresses"."store_name") AND (EXISTS ( SELECT 1\n           FROM "public"."profiles"\n          WHERE (("profiles"."store_name" = "customers"."store_name") AND ("profiles"."id" = "auth"."uid"()))))))));
\n\n\n\nCREATE POLICY "Users can view their store's customers" ON "public"."customers" FOR SELECT USING ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "customers"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can view their store's orders" ON "public"."orders" FOR SELECT USING ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "orders"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nCREATE POLICY "Users can view their store's products" ON "public"."products" FOR SELECT USING ((EXISTS ( SELECT 1\n   FROM "public"."profiles"\n  WHERE (("profiles"."store_name" = "products"."store_name") AND ("profiles"."id" = "auth"."uid"())))));
\n\n\n\nALTER TABLE "public"."customer_addresses" ENABLE ROW LEVEL SECURITY;
\n\n\nALTER TABLE "public"."customers" ENABLE ROW LEVEL SECURITY;
\n\n\nALTER TABLE "public"."order_items" ENABLE ROW LEVEL SECURITY;
\n\n\nALTER TABLE "public"."orders" ENABLE ROW LEVEL SECURITY;
\n\n\nALTER TABLE "public"."product_images" ENABLE ROW LEVEL SECURITY;
\n\n\nALTER TABLE "public"."product_tags" ENABLE ROW LEVEL SECURITY;
\n\n\nALTER TABLE "public"."products" ENABLE ROW LEVEL SECURITY;
\n\n\nALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;
\n\n\n\n\nALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";
\n\n\nALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."profiles";
\n\n\n\nGRANT USAGE ON SCHEMA "public" TO "postgres";
\nGRANT USAGE ON SCHEMA "public" TO "anon";
\nGRANT USAGE ON SCHEMA "public" TO "authenticated";
\nGRANT USAGE ON SCHEMA "public" TO "service_role";
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGRANT ALL ON FUNCTION "public"."create_order"("p_store_name" "text", "p_customer_id" "uuid", "p_status" "text", "p_subtotal" numeric, "p_discount" numeric, "p_shipping" numeric, "p_tax" numeric, "p_total" numeric, "p_notes" "text", "p_tags" "text"[], "p_items" "jsonb") TO "anon";
\nGRANT ALL ON FUNCTION "public"."create_order"("p_store_name" "text", "p_customer_id" "uuid", "p_status" "text", "p_subtotal" numeric, "p_discount" numeric, "p_shipping" numeric, "p_tax" numeric, "p_total" numeric, "p_notes" "text", "p_tags" "text"[], "p_items" "jsonb") TO "authenticated";
\nGRANT ALL ON FUNCTION "public"."create_order"("p_store_name" "text", "p_customer_id" "uuid", "p_status" "text", "p_subtotal" numeric, "p_discount" numeric, "p_shipping" numeric, "p_tax" numeric, "p_total" numeric, "p_notes" "text", "p_tags" "text"[], "p_items" "jsonb") TO "service_role";
\n\n\n\nGRANT ALL ON FUNCTION "public"."place_order"("p_store_name" "text", "p_customer_id" "uuid", "p_status" "text", "p_subtotal" numeric, "p_discount" numeric, "p_shipping" numeric, "p_tax" numeric, "p_total" numeric, "p_notes" "text", "p_tags" "text"[], "p_items" "jsonb") TO "anon";
\nGRANT ALL ON FUNCTION "public"."place_order"("p_store_name" "text", "p_customer_id" "uuid", "p_status" "text", "p_subtotal" numeric, "p_discount" numeric, "p_shipping" numeric, "p_tax" numeric, "p_total" numeric, "p_notes" "text", "p_tags" "text"[], "p_items" "jsonb") TO "authenticated";
\nGRANT ALL ON FUNCTION "public"."place_order"("p_store_name" "text", "p_customer_id" "uuid", "p_status" "text", "p_subtotal" numeric, "p_discount" numeric, "p_shipping" numeric, "p_tax" numeric, "p_total" numeric, "p_notes" "text", "p_tags" "text"[], "p_items" "jsonb") TO "service_role";
\n\n\n\nGRANT ALL ON FUNCTION "public"."update_product_stock"("p_product_id" "uuid", "p_quantity" integer) TO "anon";
\nGRANT ALL ON FUNCTION "public"."update_product_stock"("p_product_id" "uuid", "p_quantity" integer) TO "authenticated";
\nGRANT ALL ON FUNCTION "public"."update_product_stock"("p_product_id" "uuid", "p_quantity" integer) TO "service_role";
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGRANT ALL ON TABLE "public"."customer_addresses" TO "anon";
\nGRANT ALL ON TABLE "public"."customer_addresses" TO "authenticated";
\nGRANT ALL ON TABLE "public"."customer_addresses" TO "service_role";
\n\n\n\nGRANT ALL ON TABLE "public"."customers" TO "anon";
\nGRANT ALL ON TABLE "public"."customers" TO "authenticated";
\nGRANT ALL ON TABLE "public"."customers" TO "service_role";
\n\n\n\nGRANT ALL ON TABLE "public"."order_items" TO "anon";
\nGRANT ALL ON TABLE "public"."order_items" TO "authenticated";
\nGRANT ALL ON TABLE "public"."order_items" TO "service_role";
\n\n\n\nGRANT ALL ON TABLE "public"."orders" TO "anon";
\nGRANT ALL ON TABLE "public"."orders" TO "authenticated";
\nGRANT ALL ON TABLE "public"."orders" TO "service_role";
\n\n\n\nGRANT ALL ON TABLE "public"."product_images" TO "anon";
\nGRANT ALL ON TABLE "public"."product_images" TO "authenticated";
\nGRANT ALL ON TABLE "public"."product_images" TO "service_role";
\n\n\n\nGRANT ALL ON TABLE "public"."product_tags" TO "anon";
\nGRANT ALL ON TABLE "public"."product_tags" TO "authenticated";
\nGRANT ALL ON TABLE "public"."product_tags" TO "service_role";
\n\n\n\nGRANT ALL ON TABLE "public"."products" TO "anon";
\nGRANT ALL ON TABLE "public"."products" TO "authenticated";
\nGRANT ALL ON TABLE "public"."products" TO "service_role";
\n\n\n\nGRANT ALL ON TABLE "public"."profiles" TO "anon";
\nGRANT ALL ON TABLE "public"."profiles" TO "authenticated";
\nGRANT ALL ON TABLE "public"."profiles" TO "service_role";
\n\n\n\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";
\n\n\n\n\n\n\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";
\n\n\n\n\n\n\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
\nALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRESET ALL;
\n;
